Subject: [PATCH] Add mapstruct for ItemRequest
---
Index: src/test/java/ru/practicum/shareit/requests/ItemRequestServiceImplTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ru/practicum/shareit/requests/ItemRequestServiceImplTest.java b/src/test/java/ru/practicum/shareit/requests/ItemRequestServiceImplTest.java
--- a/src/test/java/ru/practicum/shareit/requests/ItemRequestServiceImplTest.java	(revision d42d0c9e3dfd8f08a574e9c27edab3bea7288845)
+++ b/src/test/java/ru/practicum/shareit/requests/ItemRequestServiceImplTest.java	(date 1676390963044)
@@ -11,6 +11,7 @@
 import ru.practicum.shareit.item.repository.ItemRepository;
 import ru.practicum.shareit.requests.dto.ItemRequestDto;
 import ru.practicum.shareit.requests.exception.ItemRequestNotFoundException;
+import ru.practicum.shareit.requests.mapper.ItemRequestMapper;
 import ru.practicum.shareit.requests.model.ItemRequest;
 import ru.practicum.shareit.requests.repository.ItemRequestRepository;
 import ru.practicum.shareit.requests.service.ItemRequestServiceImpl;
@@ -38,6 +39,9 @@
     @Autowired
     private final ItemRequestServiceImpl itemRequestService;
 
+    @Autowired
+    private final ItemRequestMapper itemRequestMapper;
+
     @MockBean
     private final ItemRequestRepository itemRequestRepository;
 
@@ -321,4 +325,4 @@
                 () -> itemRequestService.get(1L, 1L));
         assertThat(invalidItemRequestIdException.getMessage(), is("request not found"));
     }
-}
\ No newline at end of file
+}
Index: src/main/java/ru/practicum/shareit/requests/mapper/ItemRequestMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/practicum/shareit/requests/mapper/ItemRequestMapper.java b/src/main/java/ru/practicum/shareit/requests/mapper/ItemRequestMapper.java
--- a/src/main/java/ru/practicum/shareit/requests/mapper/ItemRequestMapper.java	(revision d42d0c9e3dfd8f08a574e9c27edab3bea7288845)
+++ b/src/main/java/ru/practicum/shareit/requests/mapper/ItemRequestMapper.java	(date 1676390705263)
@@ -1,35 +1,27 @@
 package ru.practicum.shareit.requests.mapper;
 
+import java.util.Collections;
+import java.util.List;
 import org.mapstruct.Mapper;
+import org.mapstruct.Mapping;
+import ru.practicum.shareit.item.dto.ItemDto;
 import ru.practicum.shareit.requests.dto.ItemRequestDto;
 import ru.practicum.shareit.requests.model.ItemRequest;
 import ru.practicum.shareit.user.model.User;
 
-import java.util.Collections;
-
-@Mapper
-public class ItemRequestMapper {
-    /*ItemRequestDto toItemRequestDto(ItemRequest itemRequest);
-    ItemRequest toItemRequest(ItemRequestDto itemRequestDto, User user);*/
+@Mapper(componentModel = "spring")
+public interface ItemRequestMapper {
 
+    @Mapping(target = "id", source = "itemRequest.id")
+    @Mapping(target = "requester", source = "itemRequest.requester.id")
+    @Mapping(target = "items", expression = "java(setItems())")
+    ItemRequestDto toItemRequestDto(ItemRequest itemRequest);
 
-    public static ItemRequestDto toItemRequestDto(ItemRequest itemRequest) {
-        return ItemRequestDto.builder()
-                .id(itemRequest.getId())
-                .description(itemRequest.getDescription())
-                .requester(itemRequest.getRequester().getId())
-                .created(itemRequest.getCreated())
-                .items(Collections.emptyList())
-                .build();
-    }
+    @Mapping(target = "id", source = "itemRequestDto.id")
+    @Mapping(target = "requester", source = "user")
+    ItemRequest toItemRequest(ItemRequestDto itemRequestDto, User user);
 
-    public static ItemRequest toItemRequest(ItemRequestDto itemRequestDto, User user) {
-        return ItemRequest.builder()
-                .id(itemRequestDto.getId())
-                .description(itemRequestDto.getDescription())
-                .requester(user)
-                .created(itemRequestDto.getCreated())
-                .build();
-
+    default List<ItemDto> setItems() {
+        return Collections.emptyList();
     }
 }
Index: src/main/java/ru/practicum/shareit/requests/service/ItemRequestServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/ru/practicum/shareit/requests/service/ItemRequestServiceImpl.java b/src/main/java/ru/practicum/shareit/requests/service/ItemRequestServiceImpl.java
--- a/src/main/java/ru/practicum/shareit/requests/service/ItemRequestServiceImpl.java	(revision d42d0c9e3dfd8f08a574e9c27edab3bea7288845)
+++ b/src/main/java/ru/practicum/shareit/requests/service/ItemRequestServiceImpl.java	(date 1676389904361)
@@ -1,5 +1,10 @@
 package ru.practicum.shareit.requests.service;
 
+import java.time.LocalDateTime;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import javax.transaction.Transactional;
 import lombok.RequiredArgsConstructor;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.PageRequest;
@@ -20,53 +25,55 @@
 import ru.practicum.shareit.user.model.User;
 import ru.practicum.shareit.user.repository.UserRepository;
 
-import javax.transaction.Transactional;
-import java.time.LocalDateTime;
-import java.util.Collections;
-import java.util.List;
-import java.util.stream.Collectors;
-
 @Service
 @RequiredArgsConstructor(onConstructor = @__(@Autowired))
 public class ItemRequestServiceImpl implements ItemRequestService {
+
     private final ItemRequestRepository itemRequestRepository;
     private final UserRepository userRepository;
     private final ItemRepository itemRepository;
 
+    private final ItemRequestMapper itemRequestMapper;
+
     @Override
     @Transactional
     public ItemRequestDto create(Long userId, ItemRequestDto itemRequestDto) {
-        User user = userRepository.findById(userId).orElseThrow(() -> new UserNotFoundException("user not found"));
+        User user = userRepository.findById(userId)
+            .orElseThrow(() -> new UserNotFoundException("user not found"));
         itemRequestDto.setCreated(LocalDateTime.now());
-        ItemRequest itemRequest = ItemRequestMapper.toItemRequest(itemRequestDto, user);
+        ItemRequest itemRequest = itemRequestMapper.toItemRequest(itemRequestDto, user);
         itemRequest = itemRequestRepository.save(itemRequest);
-        return ItemRequestMapper.toItemRequestDto(itemRequest);
+        return itemRequestMapper.toItemRequestDto(itemRequest);
     }
 
     // Получить список своих запросов
     @Override
     public List<ItemRequestDto> get(Long userId) {
 
-        User user = userRepository.findById(userId).orElseThrow(() -> new UserNotFoundException("user not found"));
-        List<ItemRequest> itemRequests = itemRequestRepository.findAllByRequesterIdOrderByCreatedDesc(userId);
-        if (itemRequests.isEmpty()) return Collections.emptyList();
+        User user = userRepository.findById(userId)
+            .orElseThrow(() -> new UserNotFoundException("user not found"));
+        List<ItemRequest> itemRequests = itemRequestRepository.findAllByRequesterIdOrderByCreatedDesc(
+            userId);
+        if (itemRequests.isEmpty()) {
+            return Collections.emptyList();
+        }
         List<ItemRequestDto> itemRequestDtos = itemRequests.stream()
-                .map(ItemRequestMapper::toItemRequestDto)
-                .collect(Collectors.toList());
+            .map(itemRequestMapper::toItemRequestDto)
+            .collect(Collectors.toList());
 
         List<Long> requestIdList = itemRequestDtos.stream()
-                .map(ItemRequestDto::getId)
-                .collect(Collectors.toList());
+            .map(ItemRequestDto::getId)
+            .collect(Collectors.toList());
         List<Item> items = itemRepository.findAllByRequestIdIn(requestIdList);
 
         for (ItemRequestDto itemRequestDto : itemRequestDtos) {
             List<Item> requestItems = items.stream()
-                    .filter(item -> item.getRequest().getId().equals(itemRequestDto.getId()))
-                    .collect(Collectors.toList());
+                .filter(item -> item.getRequest().getId().equals(itemRequestDto.getId()))
+                .collect(Collectors.toList());
             if (!requestItems.isEmpty()) {
                 List<ItemDto> itemDtos = requestItems.stream()
-                        .map(ItemMapper::toItemDto)
-                        .collect(Collectors.toList());
+                    .map(ItemMapper::toItemDto)
+                    .collect(Collectors.toList());
                 itemRequestDto.setItems(itemDtos);
             }
         }
@@ -82,29 +89,31 @@
     @Override
     public List<ItemRequestDto> get(Long userId, Long from, Long size) throws PaginationException {
 
-        User user = userRepository.findById(userId).orElseThrow(() -> new UserNotFoundException("user not found"));
+        User user = userRepository.findById(userId)
+            .orElseThrow(() -> new UserNotFoundException("user not found"));
 
         PageRequest pageRequest = PageRequestManager.form(
-                from.intValue(), size.intValue(), Sort.Direction.DESC, "created");
-        List<ItemRequest> itemRequests = itemRequestRepository.findAllByRequesterIdIsNot(userId, pageRequest);
+            from.intValue(), size.intValue(), Sort.Direction.DESC, "created");
+        List<ItemRequest> itemRequests = itemRequestRepository.findAllByRequesterIdIsNot(userId,
+            pageRequest);
 
         List<ItemRequestDto> itemRequestDtos = itemRequests.stream()
-                .map(ItemRequestMapper::toItemRequestDto)
-                .collect(Collectors.toList());
+            .map(itemRequestMapper::toItemRequestDto)
+            .collect(Collectors.toList());
 
         List<Long> requestIdList = itemRequestDtos.stream()
-                .map(ItemRequestDto::getId)
-                .collect(Collectors.toList());
+            .map(ItemRequestDto::getId)
+            .collect(Collectors.toList());
         List<Item> items = itemRepository.findAllByRequestIdIn(requestIdList);
 
         for (ItemRequestDto itemRequestDto : itemRequestDtos) {
             List<Item> requestItems = items.stream()
-                    .filter(item -> item.getRequest().getId().equals(itemRequestDto.getId()))
-                    .collect(Collectors.toList());
+                .filter(item -> item.getRequest().getId().equals(itemRequestDto.getId()))
+                .collect(Collectors.toList());
             if (!requestItems.isEmpty()) {
                 List<ItemDto> itemDtos = requestItems.stream()
-                        .map(ItemMapper::toItemDto)
-                        .collect(Collectors.toList());
+                    .map(ItemMapper::toItemDto)
+                    .collect(Collectors.toList());
                 itemRequestDto.setItems(itemDtos);
             }
         }
@@ -116,16 +125,17 @@
     @Override
     public ItemRequestDto get(Long userId, Long requestId) {
 
-        User user = userRepository.findById(userId).orElseThrow(() -> new UserNotFoundException("user not found"));
+        User user = userRepository.findById(userId)
+            .orElseThrow(() -> new UserNotFoundException("user not found"));
         ItemRequest itemRequest = itemRequestRepository.findItemRequestById(requestId)
-                .orElseThrow(() -> new ItemRequestNotFoundException("request not found"));
-        ItemRequestDto itemRequestDto = ItemRequestMapper.toItemRequestDto(itemRequest);
+            .orElseThrow(() -> new ItemRequestNotFoundException("request not found"));
+        ItemRequestDto itemRequestDto = itemRequestMapper.toItemRequestDto(itemRequest);
 
         List<Item> items = itemRepository.findAllByRequestId(itemRequestDto.getId());
         if (!items.isEmpty()) {
             List<ItemDto> itemDtos = items.stream()
-                    .map(ItemMapper::toItemDto)
-                    .collect(Collectors.toList());
+                .map(ItemMapper::toItemDto)
+                .collect(Collectors.toList());
             itemRequestDto.setItems(itemDtos);
         }
         return itemRequestDto;
